//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Zinc.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ZincParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, ID=11, NULL=12, MARKER=13, REMOVE=14, NA=15, TRUE=16, FALSE=17, 
		COORD=18, XSTR=19, SYMBOL=20, REF=21, STR=22, URI=23, NUMBER=24, DATE=25, 
		TIME=26, DATETIME=27, WS=28;
	public const int
		RULE_grid = 0, RULE_gridMeta = 1, RULE_ver = 2, RULE_tagsNoComma = 3, 
		RULE_tagsCommaOk = 4, RULE_tag = 5, RULE_tagMarker = 6, RULE_tagPair = 7, 
		RULE_cols = 8, RULE_col = 9, RULE_row = 10, RULE_val = 11, RULE_list = 12, 
		RULE_dict = 13, RULE_nestedgrid = 14, RULE_scalar = 15, RULE_bool = 16;
	public static readonly string[] ruleNames = {
		"grid", "gridMeta", "ver", "tagsNoComma", "tagsCommaOk", "tag", "tagMarker", 
		"tagPair", "cols", "col", "row", "val", "list", "dict", "nestedgrid", 
		"scalar", "bool"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\n'", "'ver:'", "','", "':'", "'['", "']'", "'{'", "'}'", "'<<'", 
		"'>>'", null, "'N'", "'M'", "'R'", "'NA'", "'T'", "'F'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "ID", 
		"NULL", "MARKER", "REMOVE", "NA", "TRUE", "FALSE", "COORD", "XSTR", "SYMBOL", 
		"REF", "STR", "URI", "NUMBER", "DATE", "TIME", "DATETIME", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Zinc.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ZincParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ZincParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ZincParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class GridContext : ParserRuleContext {
		public GridMetaContext gridMeta() {
			return GetRuleContext<GridMetaContext>(0);
		}
		public ColsContext cols() {
			return GetRuleContext<ColsContext>(0);
		}
		public RowContext[] row() {
			return GetRuleContexts<RowContext>();
		}
		public RowContext row(int i) {
			return GetRuleContext<RowContext>(i);
		}
		public GridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterGrid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitGrid(this);
		}
	}

	[RuleVersion(0)]
	public GridContext grid() {
		GridContext _localctx = new GridContext(Context, State);
		EnterRule(_localctx, 0, RULE_grid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; gridMeta();
			State = 35; cols();
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__6) | (1L << T__8) | (1L << NULL) | (1L << MARKER) | (1L << REMOVE) | (1L << NA) | (1L << TRUE) | (1L << FALSE) | (1L << COORD) | (1L << XSTR) | (1L << SYMBOL) | (1L << REF) | (1L << STR) | (1L << URI) | (1L << NUMBER) | (1L << DATE) | (1L << TIME) | (1L << DATETIME))) != 0)) {
				{
				{
				State = 36; row();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GridMetaContext : ParserRuleContext {
		public VerContext ver() {
			return GetRuleContext<VerContext>(0);
		}
		public TagsNoCommaContext tagsNoComma() {
			return GetRuleContext<TagsNoCommaContext>(0);
		}
		public GridMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gridMeta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterGridMeta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitGridMeta(this);
		}
	}

	[RuleVersion(0)]
	public GridMetaContext gridMeta() {
		GridMetaContext _localctx = new GridMetaContext(Context, State);
		EnterRule(_localctx, 2, RULE_gridMeta);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; ver();
			State = 43; tagsNoComma();
			State = 44; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VerContext : ParserRuleContext {
		public ITerminalNode STR() { return GetToken(ZincParser.STR, 0); }
		public VerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ver; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterVer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitVer(this);
		}
	}

	[RuleVersion(0)]
	public VerContext ver() {
		VerContext _localctx = new VerContext(Context, State);
		EnterRule(_localctx, 4, RULE_ver);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(T__1);
			State = 47; Match(STR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagsNoCommaContext : ParserRuleContext {
		public TagContext[] tag() {
			return GetRuleContexts<TagContext>();
		}
		public TagContext tag(int i) {
			return GetRuleContext<TagContext>(i);
		}
		public TagsNoCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagsNoComma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterTagsNoComma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitTagsNoComma(this);
		}
	}

	[RuleVersion(0)]
	public TagsNoCommaContext tagsNoComma() {
		TagsNoCommaContext _localctx = new TagsNoCommaContext(Context, State);
		EnterRule(_localctx, 6, RULE_tagsNoComma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 49; tag();
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagsCommaOkContext : ParserRuleContext {
		public TagContext[] tag() {
			return GetRuleContexts<TagContext>();
		}
		public TagContext tag(int i) {
			return GetRuleContext<TagContext>(i);
		}
		public TagsCommaOkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagsCommaOk; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterTagsCommaOk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitTagsCommaOk(this);
		}
	}

	[RuleVersion(0)]
	public TagsCommaOkContext tagsCommaOk() {
		TagsCommaOkContext _localctx = new TagsCommaOkContext(Context, State);
		EnterRule(_localctx, 8, RULE_tagsCommaOk);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 55; tag();
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 56; Match(T__2);
					}
				}

				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		public TagMarkerContext tagMarker() {
			return GetRuleContext<TagMarkerContext>(0);
		}
		public TagPairContext tagPair() {
			return GetRuleContext<TagPairContext>(0);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 10, RULE_tag);
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; tagMarker();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; tagPair();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagMarkerContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ZincParser.ID, 0); }
		public TagMarkerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagMarker; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterTagMarker(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitTagMarker(this);
		}
	}

	[RuleVersion(0)]
	public TagMarkerContext tagMarker() {
		TagMarkerContext _localctx = new TagMarkerContext(Context, State);
		EnterRule(_localctx, 12, RULE_tagMarker);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagPairContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ZincParser.ID, 0); }
		public ValContext val() {
			return GetRuleContext<ValContext>(0);
		}
		public TagPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagPair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterTagPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitTagPair(this);
		}
	}

	[RuleVersion(0)]
	public TagPairContext tagPair() {
		TagPairContext _localctx = new TagPairContext(Context, State);
		EnterRule(_localctx, 14, RULE_tagPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(ID);
			State = 71; Match(T__3);
			State = 72; val();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColsContext : ParserRuleContext {
		public ColContext[] col() {
			return GetRuleContexts<ColContext>();
		}
		public ColContext col(int i) {
			return GetRuleContext<ColContext>(i);
		}
		public ColsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cols; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterCols(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitCols(this);
		}
	}

	[RuleVersion(0)]
	public ColsContext cols() {
		ColsContext _localctx = new ColsContext(Context, State);
		EnterRule(_localctx, 16, RULE_cols);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; col();
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 75; Match(T__2);
				State = 76; col();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(ZincParser.ID, 0); }
		public TagsNoCommaContext tagsNoComma() {
			return GetRuleContext<TagsNoCommaContext>(0);
		}
		public ColContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_col; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterCol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitCol(this);
		}
	}

	[RuleVersion(0)]
	public ColContext col() {
		ColContext _localctx = new ColContext(Context, State);
		EnterRule(_localctx, 18, RULE_col);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(ID);
			State = 85; tagsNoComma();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(ZincParser.NULL, 0); }
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public RowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterRow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitRow(this);
		}
	}

	[RuleVersion(0)]
	public RowContext row() {
		RowContext _localctx = new RowContext(Context, State);
		EnterRule(_localctx, 20, RULE_row);
		int _la;
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; Match(NULL);
				State = 88; Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89; val();
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 90; Match(T__2);
					State = 92;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__6) | (1L << T__8) | (1L << NULL) | (1L << MARKER) | (1L << REMOVE) | (1L << NA) | (1L << TRUE) | (1L << FALSE) | (1L << COORD) | (1L << XSTR) | (1L << SYMBOL) | (1L << REF) | (1L << STR) | (1L << URI) | (1L << NUMBER) | (1L << DATE) | (1L << TIME) | (1L << DATETIME))) != 0)) {
						{
						State = 91; val();
						}
					}

					}
					}
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 99; Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValContext : ParserRuleContext {
		public ScalarContext scalar() {
			return GetRuleContext<ScalarContext>(0);
		}
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public DictContext dict() {
			return GetRuleContext<DictContext>(0);
		}
		public NestedgridContext nestedgrid() {
			return GetRuleContext<NestedgridContext>(0);
		}
		public ValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_val; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitVal(this);
		}
	}

	[RuleVersion(0)]
	public ValContext val() {
		ValContext _localctx = new ValContext(Context, State);
		EnterRule(_localctx, 22, RULE_val);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL:
			case MARKER:
			case REMOVE:
			case NA:
			case TRUE:
			case FALSE:
			case COORD:
			case XSTR:
			case SYMBOL:
			case REF:
			case STR:
			case URI:
			case NUMBER:
			case DATE:
			case TIME:
			case DATETIME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103; scalar();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 104; list();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 105; dict();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 4);
				{
				State = 106; nestedgrid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ValContext[] val() {
			return GetRuleContexts<ValContext>();
		}
		public ValContext val(int i) {
			return GetRuleContext<ValContext>(i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 24, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(T__4);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__6) | (1L << T__8) | (1L << NULL) | (1L << MARKER) | (1L << REMOVE) | (1L << NA) | (1L << TRUE) | (1L << FALSE) | (1L << COORD) | (1L << XSTR) | (1L << SYMBOL) | (1L << REF) | (1L << STR) | (1L << URI) | (1L << NUMBER) | (1L << DATE) | (1L << TIME) | (1L << DATETIME))) != 0)) {
				{
				{
				State = 110; val();
				State = 111; Match(T__2);
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 118; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictContext : ParserRuleContext {
		public TagsCommaOkContext tagsCommaOk() {
			return GetRuleContext<TagsCommaOkContext>(0);
		}
		public DictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterDict(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitDict(this);
		}
	}

	[RuleVersion(0)]
	public DictContext dict() {
		DictContext _localctx = new DictContext(Context, State);
		EnterRule(_localctx, 26, RULE_dict);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(T__6);
			State = 121; tagsCommaOk();
			State = 122; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedgridContext : ParserRuleContext {
		public GridContext grid() {
			return GetRuleContext<GridContext>(0);
		}
		public NestedgridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedgrid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterNestedgrid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitNestedgrid(this);
		}
	}

	[RuleVersion(0)]
	public NestedgridContext nestedgrid() {
		NestedgridContext _localctx = new NestedgridContext(Context, State);
		EnterRule(_localctx, 28, RULE_nestedgrid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(T__8);
			State = 125; grid();
			State = 126; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(ZincParser.NULL, 0); }
		public ITerminalNode MARKER() { return GetToken(ZincParser.MARKER, 0); }
		public ITerminalNode REMOVE() { return GetToken(ZincParser.REMOVE, 0); }
		public ITerminalNode NA() { return GetToken(ZincParser.NA, 0); }
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public ITerminalNode REF() { return GetToken(ZincParser.REF, 0); }
		public ITerminalNode SYMBOL() { return GetToken(ZincParser.SYMBOL, 0); }
		public ITerminalNode STR() { return GetToken(ZincParser.STR, 0); }
		public ITerminalNode URI() { return GetToken(ZincParser.URI, 0); }
		public ITerminalNode NUMBER() { return GetToken(ZincParser.NUMBER, 0); }
		public ITerminalNode DATE() { return GetToken(ZincParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(ZincParser.TIME, 0); }
		public ITerminalNode DATETIME() { return GetToken(ZincParser.DATETIME, 0); }
		public ITerminalNode COORD() { return GetToken(ZincParser.COORD, 0); }
		public ITerminalNode XSTR() { return GetToken(ZincParser.XSTR, 0); }
		public ScalarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterScalar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitScalar(this);
		}
	}

	[RuleVersion(0)]
	public ScalarContext scalar() {
		ScalarContext _localctx = new ScalarContext(Context, State);
		EnterRule(_localctx, 30, RULE_scalar);
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128; Match(NULL);
				}
				break;
			case MARKER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129; Match(MARKER);
				}
				break;
			case REMOVE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 130; Match(REMOVE);
				}
				break;
			case NA:
				EnterOuterAlt(_localctx, 4);
				{
				State = 131; Match(NA);
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 132; @bool();
				}
				break;
			case REF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 133; Match(REF);
				}
				break;
			case SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 134; Match(SYMBOL);
				}
				break;
			case STR:
				EnterOuterAlt(_localctx, 8);
				{
				State = 135; Match(STR);
				}
				break;
			case URI:
				EnterOuterAlt(_localctx, 9);
				{
				State = 136; Match(URI);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 10);
				{
				State = 137; Match(NUMBER);
				}
				break;
			case DATE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 138; Match(DATE);
				}
				break;
			case TIME:
				EnterOuterAlt(_localctx, 12);
				{
				State = 139; Match(TIME);
				}
				break;
			case DATETIME:
				EnterOuterAlt(_localctx, 13);
				{
				State = 140; Match(DATETIME);
				}
				break;
			case COORD:
				EnterOuterAlt(_localctx, 14);
				{
				State = 141; Match(COORD);
				}
				break;
			case XSTR:
				EnterOuterAlt(_localctx, 15);
				{
				State = 142; Match(XSTR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(ZincParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(ZincParser.FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZincListener typedListener = listener as IZincListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 32, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1E', '\x96', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '(', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '+', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\a', '\x5', 
		'\x35', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x38', '\v', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '<', '\n', '\x6', '\a', '\x6', '>', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x41', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x45', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', 'P', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'S', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '_', '\n', '\f', '\a', '\f', '\x61', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\x64', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'h', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', 'n', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\a', '\xE', 't', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 'w', 
		'\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x92', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x2', '\x2', '\x13', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '\x2', '\x3', '\x3', '\x2', '\x12', '\x13', '\x2', '\x9F', 
		'\x2', '$', '\x3', '\x2', '\x2', '\x2', '\x4', ',', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x30', '\x3', '\x2', '\x2', '\x2', '\b', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\n', '?', '\x3', '\x2', '\x2', '\x2', '\f', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x10', 'H', '\x3', '\x2', '\x2', '\x2', '\x12', 'L', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'V', '\x3', '\x2', '\x2', '\x2', '\x16', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x18', 'm', '\x3', '\x2', '\x2', '\x2', '\x1A', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', 'z', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'~', '\x3', '\x2', '\x2', '\x2', ' ', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x93', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x5', '\x4', '\x3', 
		'\x2', '%', ')', '\x5', '\x12', '\n', '\x2', '&', '(', '\x5', '\x16', 
		'\f', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', '+', '\x3', '\x2', 
		'\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x3', '\x3', '\x2', '\x2', '\x2', '+', ')', 
		'\x3', '\x2', '\x2', '\x2', ',', '-', '\x5', '\x6', '\x4', '\x2', '-', 
		'.', '\x5', '\b', '\x5', '\x2', '.', '/', '\a', '\x3', '\x2', '\x2', '/', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\x4', '\x2', 
		'\x2', '\x31', '\x32', '\a', '\x18', '\x2', '\x2', '\x32', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x35', '\x5', '\f', '\a', '\x2', '\x34', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\t', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\x5', '\f', '\a', '\x2', 
		':', '<', '\a', '\x5', '\x2', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\x3', '\x2', '\x2', '\x2', '<', '>', '\x3', '\x2', '\x2', '\x2', 
		'=', '\x39', '\x3', '\x2', '\x2', '\x2', '>', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', 
		'\x2', '@', '\v', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x45', '\x5', '\xE', '\b', '\x2', '\x43', '\x45', 
		'\x5', '\x10', '\t', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'G', '\a', '\r', '\x2', '\x2', 'G', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'I', '\a', '\r', '\x2', '\x2', 'I', 'J', '\a', 
		'\x6', '\x2', '\x2', 'J', 'K', '\x5', '\x18', '\r', '\x2', 'K', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'L', 'Q', '\x5', '\x14', '\v', '\x2', 'M', 
		'N', '\a', '\x5', '\x2', '\x2', 'N', 'P', '\x5', '\x14', '\v', '\x2', 
		'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', 'T', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\a', '\x3', '\x2', '\x2', 'U', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\a', '\r', '\x2', '\x2', 'W', 'X', '\x5', '\b', '\x5', 
		'\x2', 'X', '\x15', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\xE', 
		'\x2', '\x2', 'Z', 'h', '\a', '\x3', '\x2', '\x2', '[', '\x62', '\x5', 
		'\x18', '\r', '\x2', '\\', '^', '\a', '\x5', '\x2', '\x2', ']', '_', '\x5', 
		'\x18', '\r', '\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', 
		'\x2', '\x2', '\x2', '_', '\x61', '\x3', '\x2', '\x2', '\x2', '`', '\\', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x65', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\x3', '\x2', '\x2', 
		'\x66', 'h', '\x3', '\x2', '\x2', '\x2', 'g', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'g', '[', '\x3', '\x2', '\x2', '\x2', 'h', '\x17', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'n', '\x5', ' ', '\x11', '\x2', 'j', 'n', '\x5', '\x1A', 
		'\xE', '\x2', 'k', 'n', '\x5', '\x1C', '\xF', '\x2', 'l', 'n', '\x5', 
		'\x1E', '\x10', '\x2', 'm', 'i', '\x3', '\x2', '\x2', '\x2', 'm', 'j', 
		'\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 
		'l', '\x3', '\x2', '\x2', '\x2', 'n', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'o', 'u', '\a', '\a', '\x2', '\x2', 'p', 'q', '\x5', '\x18', '\r', '\x2', 
		'q', 'r', '\a', '\x5', '\x2', '\x2', 'r', 't', '\x3', '\x2', '\x2', '\x2', 
		's', 'p', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x3', '\x2', '\x2', '\x2', 
		'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\a', '\b', '\x2', '\x2', 'y', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\a', '\t', '\x2', '\x2', '{', '|', '\x5', '\n', '\x6', 
		'\x2', '|', '}', '\a', '\n', '\x2', '\x2', '}', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\a', '\v', '\x2', '\x2', '\x7F', '\x80', '\x5', 
		'\x2', '\x2', '\x2', '\x80', '\x81', '\a', '\f', '\x2', '\x2', '\x81', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x92', '\a', '\xE', '\x2', 
		'\x2', '\x83', '\x92', '\a', '\xF', '\x2', '\x2', '\x84', '\x92', '\a', 
		'\x10', '\x2', '\x2', '\x85', '\x92', '\a', '\x11', '\x2', '\x2', '\x86', 
		'\x92', '\x5', '\"', '\x12', '\x2', '\x87', '\x92', '\a', '\x17', '\x2', 
		'\x2', '\x88', '\x92', '\a', '\x16', '\x2', '\x2', '\x89', '\x92', '\a', 
		'\x18', '\x2', '\x2', '\x8A', '\x92', '\a', '\x19', '\x2', '\x2', '\x8B', 
		'\x92', '\a', '\x1A', '\x2', '\x2', '\x8C', '\x92', '\a', '\x1B', '\x2', 
		'\x2', '\x8D', '\x92', '\a', '\x1C', '\x2', '\x2', '\x8E', '\x92', '\a', 
		'\x1D', '\x2', '\x2', '\x8F', '\x92', '\a', '\x14', '\x2', '\x2', '\x90', 
		'\x92', '\a', '\x15', '\x2', '\x2', '\x91', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x83', '\x3', '\x2', '\x2', '\x2', '\x91', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x85', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x91', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x88', '\x3', '\x2', '\x2', '\x2', '\x91', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x94', '\t', '\x2', '\x2', '\x2', '\x94', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xE', ')', '\x36', ';', '?', '\x44', 'Q', '^', '\x62', 
		'g', 'm', 'u', '\x91',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
